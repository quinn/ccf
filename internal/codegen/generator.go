package codegen

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

// PageRoute represents a route generated from a page file
type PageRoute struct {
	Path         string
	TemplatePath string
	HandlerName  string
	Params       []string
}

// Generator handles the code generation for routes
type Generator struct {
	PagesDir    string
	OutputPath  string
	PackageName string
}

// New creates a new Generator instance
func New(pagesDir, outputPath, packageName string) *Generator {
	return &Generator{
		PagesDir:    pagesDir,
		OutputPath:  outputPath,
		PackageName: packageName,
	}
}

// Generate scans the pages directory and generates route code
func (g *Generator) Generate() error {
	routes, err := g.scanPagesDirectory()
	if err != nil {
		return fmt.Errorf("failed to scan pages directory: %w", err)
	}

	return g.generateRouterCode(routes)
}

// scanPagesDirectory walks through the pages directory and generates route information
func (g *Generator) scanPagesDirectory() ([]PageRoute, error) {
	var routes []PageRoute

	err := filepath.Walk(g.PagesDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if info.IsDir() || !strings.HasSuffix(info.Name(), ".templ") {
			return nil
		}

		// Get relative path from pages directory
		relPath, err := filepath.Rel(g.PagesDir, path)
		if err != nil {
			return fmt.Errorf("failed to get relative path: %w", err)
		}

		route, err := g.parseRouteFromFilename(relPath)
		if err != nil {
			return fmt.Errorf("failed to parse route from %s: %w", relPath, err)
		}

		routes = append(routes, route)
		return nil
	})

	if err != nil {
		return nil, fmt.Errorf("failed to scan pages directory: %w", err)
	}

	return routes, nil
}

// parseRouteFromFilename converts a template filename into a route
func (g *Generator) parseRouteFromFilename(filename string) (PageRoute, error) {
	// Remove .templ suffix and get the base filename without directory
	base := filepath.Base(filename)
	base = strings.TrimSuffix(base, ".templ")

	var params []string
	var routeParts []string
	var handlerName string

	// Split the path into segments by periods
	segments := strings.Split(base, ".")
	for _, segment := range segments {
		if strings.HasPrefix(segment, "[") && strings.HasSuffix(segment, "]") {
			// Extract parameter name without brackets
			param := segment[1 : len(segment)-1]
			params = append(params, param)
			routeParts = append(routeParts, ":"+param)
		} else {
			routeParts = append(routeParts, segment)
		}
	}

	routePath := "/" + strings.Join(routeParts, "/")

	// Handle index routes
	if strings.HasSuffix(routePath, "index") {
		routePath = strings.TrimSuffix(routePath, "index")
		handlerName = "HandleIndex"
	} else if strings.Contains(routePath, "blog") {
		handlerName = "HandleBlogPost"
	}

	// Clean up the route path
	routePath = strings.ReplaceAll(routePath, "//", "/")
	if routePath != "/" && strings.HasSuffix(routePath, "/") {
		routePath = strings.TrimSuffix(routePath, "/")
	}

	return PageRoute{
		Path:         routePath,
		TemplatePath: filename,
		HandlerName:  handlerName,
		Params:       params,
	}, nil
}

// generateRouterCode generates the router implementation
func (g *Generator) generateRouterCode(routes []PageRoute) error {
	const routerTemplate = `// Code generated by go-astro. DO NOT EDIT.
package {{.PackageName}}

import (
	"github.com/labstack/echo/v4"
	"go.quinn.io/go-astro/pages"
)

// RegisterRoutes adds all page routes to the Echo instance
func RegisterRoutes(e *echo.Echo) {
	{{range .Routes}}
	e.GET("{{.Path}}", {{.HandlerName}}){{end}}
}

{{range .Routes}}
{{if eq .HandlerName "HandleIndex"}}
func HandleIndex(c echo.Context) error {
	return pages.Index().Render(c.Request().Context(), c.Response().Writer)
}
{{else if eq .HandlerName "HandleBlogPost"}}
func HandleBlogPost(c echo.Context) error {
	slug := c.Param("slug")
	return pages.BlogPost(slug).Render(c.Request().Context(), c.Response().Writer)
}
{{end}}
{{end}}
`

	tmpl, err := template.New("router").Parse(routerTemplate)
	if err != nil {
		return fmt.Errorf("failed to parse template: %w", err)
	}

	// Create output directory if it doesn't exist
	if err := os.MkdirAll(filepath.Dir(g.OutputPath), 0755); err != nil {
		return fmt.Errorf("failed to create output directory: %w", err)
	}

	f, err := os.Create(g.OutputPath)
	if err != nil {
		return fmt.Errorf("failed to create output file: %w", err)
	}
	defer f.Close()

	data := struct {
		PackageName string
		Routes      []PageRoute
	}{
		PackageName: g.PackageName,
		Routes:      routes,
	}

	if err := tmpl.Execute(f, data); err != nil {
		return fmt.Errorf("failed to execute template: %w", err)
	}

	return nil
}
